// automatically generated by Xtext
grammar uk.ac.kcl.inf.mdd.project.Githubaction with org.eclipse.xtext.common.Terminals

import "http://www.example.org/githubaction" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Repository:
	{Repository}
	'Repository'
	'{'
		('workflows' '{' workflows+=Workflow ( "," workflows+=Workflow)* '}' )?
	'}';

Workflow:
	{Workflow}
	'Workflow'
	'{'
		('name' name=EString)?
		('on' '{' on+=Event ( "," on+=Event)* '}' )?
		('env' '{' env+=Env ( "," env+=Env)* '}' )?
		('defaults' defaults=RunSetting)?
		('jobs' '{' jobs+=Job ( "," jobs+=Job)* '}' )?
	'}';

Event:
	PushEvent
	| PullRequestEvent
	| ScheduleEvent
	| WorkflowDispatchEvent
	| RepositoryDispatchEvent
	| CreateEvent
	| DeleteEvent
	| DeploymentEvent
	| IssueEvent
	| LabelEvent;

Job:
	'Job'
	name=ID
	'{'
		('name' jobName=EString)?
		('needs' '(' needs+=[Job|EString] ( "," needs+=[Job|EString])* ')' )?
		('runsOn' runsOn=EString)?
		('environment' environment=[Environment|EString])?
		('outputs' '{' outputs+=EString ( "," outputs+=EString)* '}' )?
		('env' '{' env+=Env ( "," env+=Env)* '}' )?
		('defaults' '{' defaults+=RunSetting ( "," defaults+=RunSetting)* '}' )?
		('if' if=EString)?
		('steps' '{' steps+=Step ( "," steps+=Step)* '}' )?
	'}';

Step:
	{Step}
	'Step'
	(name=ID)?
	'{'
		('name' stepName=EString)?
		('if' if=EString)?
		('uses' uses=EString)?
		('run' '{' run+=EString ( "," ^run+=EString)* '}')?
		('runSetting' runSetting=RunSetting)?
		('with' '{' ^with+=InputParameter ( "," ^with+=InputParameter)* '}' )?
		('entrypoint' entrypoint=EString)?
		('args' args=EString)?
		('env' '{' env+=Env ( "," env+=Env)* '}' )?
	'}';

Env:
	{Env}
	name=EString ':' value=EString;
	
InputParameter:
	{InputParameter}
	name=EString ':' value=EString;

Environment:
	{Environment}
	'Environment'
	name=EString
	'{'
		('url' url=EString)?
	'}';

RunSetting:
	{RunSetting}
	'RunSetting'
	'{'
		('workingDirectory' workingDirectory=EString)?
		('shell' shell=EString)?
		('with' '{' ^with+=Env ( "," ^with+=Env)* '}' )?
	'}';

PushEvent:
	{PushEvent}
	'PushEvent'
	'{'
		('branches' '{' branches+=EString ( "," branches+=EString)* '}' )?
		('tags' '{' tags+=EString ( "," tags+=EString)* '}' )?
		('branchesIgnore' '{' branchesIgnore+=EString ( "," branchesIgnore+=EString)* '}' )?
		('tagsIgnore' '{' tagsIgnore+=EString ( "," tagsIgnore+=EString)* '}' )?
		('paths' '{' paths+=EString ( "," paths+=EString)* '}' )?
		('pathsIgnore' '{' pathsIgnore+=EString ( "," pathsIgnore+=EString)* '}' )?
	'}';

PullRequestEvent:
	{PullRequestEvent}
	'PullRequestEvent'
	'{'
		('branches' '{' branches+=EString ( "," branches+=EString)* '}' )?
		('tags' '{' tags+=EString ( "," tags+=EString)* '}' )?
		('branchesIgnore' '{' branchesIgnore+=EString ( "," branchesIgnore+=EString)* '}' )?
		('tagsIgnore' '{' tagsIgnore+=EString ( "," tagsIgnore+=EString)* '}' )?
		('paths' '{' paths+=EString ( "," paths+=EString)* '}' )?
		('pathsIgnore' '{' pathsIgnore+=EString ( "," pathsIgnore+=EString)* '}' )?
	'}';

ScheduleEvent:
	{ScheduleEvent}
	'ScheduleEvent'
	'{'
		('minute' minute=EString)?
		('hour' hour=EString)?
		('day' day=EString)?
		('month' month=EString)?
		('dayOfWeek' dayOfWeek=EString)?
	'}';

WorkflowDispatchEvent:
	{WorkflowDispatchEvent}
	'WorkflowDispatchEvent'
	'{'
		('inputs' '{' inputs+=Input ( "," inputs+=Input)* '}' )?
	'}';

RepositoryDispatchEvent:
	{RepositoryDispatchEvent}
	'RepositoryDispatchEvent'
	'{'
		('eventTypes' '{' eventTypes+=EString ( "," eventTypes+=EString)* '}' )?
	'}';

CreateEvent:
	{CreateEvent}
	'CreateEvent'
	;

DeleteEvent:
	{DeleteEvent}
	'DeleteEvent'
	;

DeploymentEvent:
	{DeploymentEvent}
	'DeploymentEvent'
	;

IssueEvent:
	{IssueEvent}
	'IssueEvent'
	'{'
		('activityTypes' '{' activityTypes+=IssueActivityType ( "," activityTypes+=IssueActivityType)* '}' )?
	'}';

LabelEvent:
	{LabelEvent}
	'LabelEvent'
	'{'
		('activityTypes' '{' activityTypes+=LabelActivityType ( "," activityTypes+=LabelActivityType)* '}' )?
	'}';

Input:
	{Input}
	(required?='required')?
	'Input'
	name=EString
	'{'
		('description' description=EString)?
		('default' default=EString)?
	'}';

EString returns ecore::EString:
	STRING | ID;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum IssueActivityType:
	opened = 'opened'
	| edited = 'edited'
	| deleted = 'deleted'
	| transferred = 'transferred'
	| pinned = 'pinned'
	| unpinned = 'unpinned'
	| closed = 'closed'
	| reopened = 'reopened'
	| assigned = 'assigned'
	| unassigned = 'unassigned'
	| labeled = 'labeled'
	| unlabeled = 'unlabeled'
	| locked = 'locked'
	| unlocked = 'unlocked'
	| milestoned = 'milestoned'
	| demilestoned = 'demilestoned';

enum LabelActivityType:
	created = 'created'
	| edited = 'edited'
	| deleted = 'deleted';

