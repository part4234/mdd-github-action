/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.mdd.project.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import uk.ac.kcl.inf.mdd.project.githubaction.Repository;
import uk.ac.kcl.inf.mdd.project.githubaction.Workflow;
import uk.ac.kcl.inf.mdd.project.githubaction.Event;
import uk.ac.kcl.inf.mdd.project.githubaction.Job;
import uk.ac.kcl.inf.mdd.project.githubaction.Step;

import uk.ac.kcl.inf.mdd.project.githubaction.*; //says deprecated but works :o

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GithubactionGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		val model = resource.contents.head as Repository
		fsa.generateFile(resource.deriveStatsTargetFileNameFor, model.doGenerateStats )
		
		//The base call, this doesnt differ on the 2 file requirement in the same repo
		fsa.generateFile(resource.deriveStatsTargetFileNameFor, model.doGenerateClass)
		
		//split file using the link shown
		
		}
	
	
	def deriveStatsTargetFileNameFor(Resource resource) {
		resource.URI.appendFileExtension('yaml').lastSegment
	}
	

	def String doGenerateStats(Repository program) '''
		Program contains:
		
		- «program.eAllContents.filter(Repository).size» Repositories
		- «program.eAllContents.filter(Workflow).size» Workflows
		- «program.eAllContents.filter(Event).size» Events
		- «program.eAllContents.filter(Job).size» Jobs
		- «program.eAllContents.filter(Step).size» Steps

	'''
	
		def deriveClassNameFor(Resource resource) {
		val origName = resource.URI.lastSegment
		
		origName.substring(0, origName.indexOf('.')).toFirstUpper + 'Turtle'
	}
	
	/*
	 * Below are parseable dispatch mathos for all grammar types
	 */
	def String doGenerateClass(Repository program) '''
		# This is the generated .yaml file for the input repository.
		# Files are individually generated Individually for each workflow and differ by main/feature
		
		«program.workflows.map[generateWorkFlowStmt()].join('\n')»
		
	
	'''
	/* 
	 * «» Ignore the name and just append to it. Get it from the top attribute values.
	   Files need to be split here for master and featre- TBD
	 * 
	 *
	 * */ 
	 
	dispatch def String generateWorkFlowStmt(Workflow stmt) '''
		name: «stmt.on»
	
		«if (!stmt.on.empty){'''on:'''}»«stmt.on.get(0).generateEventStmt»
		
 		«if (!stmt.env.empty){'''env:'''}»«stmt.env.get(0).generateEventStmt2»
		
		«if (stmt.defaults != ""){'''defaults:'''}»«stmt.defaults.generateEventStmt3»
		
		«if (!stmt.jobs.empty){'''jobs:'''}»«stmt.jobs.get(0).generateEventStmt4»		
	
		'''


	//add more methods to handle the rest calls
	dispatch def String generateEventStmt(Event stmt) '''
		
		«if (PushEvent != null){'''    push:'''}»«PushEvent.cast(PushEvent).generatePushEventStmt»
		«if (PullRequestEvent != null){'''    push:'''}»«generatePullRequestEventt»
		«if (ScheduleEvent != null){'''    push:'''}»«generateScheduleEvent»
		«if (WorkflowDispatchEvent != null){'''    push:'''}»«generateWorkflowDispatchEvent»
		«if (RepositoryDispatchEvent != null){'''    push:'''}»«generateRepositoryDispatchEvent»
		«if (CreateEvent != null){'''    push:'''}»«generateCreateEvent»
		«if (DeleteEvent != null){'''    push:'''}»«generateDeleteEvent»
		«if (DeploymentEvent != null){'''    push:'''}»«generateDeploymentEvent»
		«if (IssueEvent != null){'''    push:'''}»«generateIssueEvent»
		«if (LabelEvent != null){'''    push:'''}»«generateLabelEvent»						
	'''

	//gets access to all local attributes of a class/interface
	dispatch def String generatePushEventStmt(PushEvent stmt) '''
		
		«if (!stmt.branchesIgnore.empty){'''    branches: [master]'''}»

	'''

	
	dispatch def String generateEventStmt2(Env stmt) ''''''
		
	dispatch def String generateEventStmt3(RunSetting stmt) ''''''
	
	dispatch def String generateEventStmt4(Job stmt) ''''''
	

	
	



		
	def generateLabelEvent(Object null1) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	def generateIssueEvent(Object null1) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	def generateDeploymentEvent(Object null1) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	def generateDeleteEvent(Object null1) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	def generateCreateEvent(Object null1) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	def generateRepositoryDispatchEvent(Object null1) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	def generateWorkflowDispatchEvent(Object null1) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	def generateScheduleEvent(Object null1) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	def generatePullRequestEventt(Object null1) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
		
}
