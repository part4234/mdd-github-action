/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.mdd.project.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import uk.ac.kcl.inf.mdd.project.githubaction.Repository;
import uk.ac.kcl.inf.mdd.project.githubaction.Workflow;
import uk.ac.kcl.inf.mdd.project.githubaction.Event;
import uk.ac.kcl.inf.mdd.project.githubaction.Job;
import uk.ac.kcl.inf.mdd.project.githubaction.Step;

import uk.ac.kcl.inf.mdd.project.githubaction.*; import org.eclipse.emf.common.util.EList

//says deprecated but works :o

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GithubactionGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		val model = resource.contents.head as Repository
		fsa.generateFile(resource.deriveStatsTargetFileNameFor, model.doGenerateStats )
		
		//The base call, this doesnt differ on the 2 file requirement in the same repo
		fsa.generateFile(resource.deriveStatsTargetFileNameFor, model.doGenerateClass)
		
		//split file using the link shown
		
		}
	
	
	def deriveStatsTargetFileNameFor(Resource resource) {
		resource.URI.appendFileExtension('yaml').lastSegment
	}
	

	def String doGenerateStats(Repository program) '''
		Program contains:
		
		- «program.eAllContents.filter(Repository).size» Repositories
		- «program.eAllContents.filter(Workflow).size» Workflows
		- «program.eAllContents.filter(Event).size» Events
		- «program.eAllContents.filter(Job).size» Jobs
		- «program.eAllContents.filter(Step).size» Steps

	'''
	
		def deriveClassNameFor(Resource resource) {
		val origName = resource.URI.lastSegment
		
		origName.substring(0, origName.indexOf('.')).toFirstUpper + 'Turtle'
	}
	
	/*
	 * Below are parseable dispatch mathos for all grammar types
	 */
	def String doGenerateClass(Repository program) '''
		# This is the generated .yaml file for the input repository.
		# Files are individually generated Individually for each workflow and differ by main/feature
		
			«program.workflows.map[generateWorkFlowStmt(new Environment)].join('\n')»
		
	
	'''

	private static class Environment {
		var int counter = 0
		def getFreshVarName() '''i«counter++»'''
		def exit() { counter-- }
	}
	
	
	
	dispatch def String generateWorkFlowStmt(Workflow stmt, Environment env) '''
		name: «stmt.on»
		
		on:
		
		«if (!stmt.on.empty){
			
		    val freshVarName = env.getFreshVarName
			val result = '''
				for (int «freshVarName» = 0; «freshVarName» < «stmt.on.size»; «freshVarName»++) {
					«stmt.statements.map[generateJavaStatement(env)].join('\n')»
				}
				
		env.exit
		result
		
		
		'''}»« stmt.on.generateEventStmt»
		
 		«if (!stmt.env.empty){'''env:'''}»«stmt.env.get(0).generateEventStmt2»
		
		«if (stmt.defaults != ""){'''defaults:'''}»«stmt.defaults.generateEventStmt3»
		
		«if (!stmt.jobs.empty){'''jobs:'''}»«stmt.jobs.get(0).generateEventStmt4»		
	
		'''


	/*add more methods to handle the rest calls
	dispatch def String generateEventStmt(Event stmt) '''
		
		«if (PushEvent != null ){'''    push:'''}»«generatePullRequestEventt»
		«if (PullRequestEvent != null){'''    push:'''}»«generatePullRequestEventt»
		«if (ScheduleEvent != null){'''    push:'''}»«generateScheduleEvent»
		«if (WorkflowDispatchEvent != null){'''    push:'''}»«generateWorkflowDispatchEvent»
		«if (RepositoryDispatchEvent != null){'''    push:'''}»«generateRepositoryDispatchEvent»
		«if (CreateEvent != null){'''    push:'''}»«generateCreateEvent»
		«if (DeleteEvent != null){'''    push:'''}»«generateDeleteEvent»
		«if (DeploymentEvent != null){'''    push:'''}»«generateDeploymentEvent»
		«if (IssueEvent != null){'''    push:'''}»«generateIssueEvent»
		«if (LabelEvent != null){'''    push:'''}»«generateLabelEvent»						
	'''
    */
    
	//gets access to all local attributes of a class/interface
	dispatch def String generatePushEvent(PushEvent stmt) '''
		
		«if (!stmt.branchesIgnore.empty){'''    branches: [master]'''}»

	'''

	
	dispatch def String generatePullEvent(PullRequestEvent stmt) ''''''
		
	dispatch def String generateScheduleEvent(ScheduleEvent stmt) ''''''

		
	dispatch def String generateWorkflowEvent(WorkflowDispatchEvent stmt) ''''''
	
	dispatch def String generateDispatchEvent(RepositoryDispatchEvent stmt) ''''''
		
	dispatch def String generateCreateEvent(CreateEvent stmt) ''''''

	dispatch def String generateDeleteEvent(DeleteEvent stmt) ''''''
		
	dispatch def String generateDeploymentEvent(DeploymentEvent stmt) ''''''	

	dispatch def String generateIssueEvent(IssueEvent stmt) ''''''
		
	dispatch def String generateLabelEvent(LabelEvent stmt) ''''''	

		
}
