/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.mdd.project.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import uk.ac.kcl.inf.mdd.project.githubaction.Repository;
import uk.ac.kcl.inf.mdd.project.githubaction.Workflow;
import uk.ac.kcl.inf.mdd.project.githubaction.Event;
import uk.ac.kcl.inf.mdd.project.githubaction.Job;
import uk.ac.kcl.inf.mdd.project.githubaction.Step;

import uk.ac.kcl.inf.mdd.project.githubaction.*; import org.eclipse.emf.common.util.EList

//says deprecated but works :o

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GithubactionGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		val model = resource.contents.head as Repository
		//fsa.generateFile(resource.deriveStatsTargetFileNameFor, model.doGenerateStats ) -- To be added later for file generation
		
		//val className = resource.deriveClassNameFor
		fsa.generateFile( 'test.txt', model.doGenerateClass())
		
		//split file using the link shown
		
		}
	
	
	def deriveStatsTargetFileNameFor(Resource resource) {
		resource.URI.appendFileExtension('yaml').lastSegment
	}
	

	def String doGenerateStats(Repository program) '''
		Program contains:
		
		- «program.eAllContents.filter(Repository).size» Repositories
		- «program.eAllContents.filter(Workflow).size» Workflows
		- «program.eAllContents.filter(Event).size» Events
		- «program.eAllContents.filter(Job).size» Jobs
		- «program.eAllContents.filter(Step).size» Steps

	'''
	
	def deriveClassNameFor(Resource resource) {
		val origName = resource.URI.lastSegment
		
		origName.substring(0, origName.indexOf('.')).toFirstUpper + 'Turtle'
	}
	
	/*
	 * Below are parseable dispatch mathos for all grammar types
	 */
	def String doGenerateClass(Repository program) '''
		«program.workflows.map[generateWorkFlowStmt(new Environment)].join('\n')»
		
	
	'''

	private static class Environment {
		var int counter = 0
		def getFreshVarName() '''i_«counter++»'''
		def exit() { counter-- }
	}
	
	
	
	dispatch def String generateWorkFlowStmt(Workflow stmt, Environment env) '''
		name: «stmt.name.toString»
		
		on:
		
		«if (!stmt.on.empty){
			'''push:'''
				for (Event ev : stmt.on){
					«generateEventType(ev).join('\n')»
				}
		}»

		«if (!stmt.jobs.empty){
			'''jobs:'''
				for (Job jobs : stmt.jobs){
					«generateJobType(jobs).join('\n')»
				}
		}»						

		'''
		

    
   // assuming the attributes are in EList we simply check the 1st index as null or not
	dispatch def String generateEventType(PushEvent stmt) '''
		
		«if (stmt.branches.get(1) !== null){'''branches:'''+ stmt.branches.get(1)}»
		«if (stmt.tags.get(1) !== null){'''stmt.branches.get(1)'''}»
		«if (stmt.branchesIgnore.get(1) !== null){'''branches:'''+ stmt.branches.get(1)}»
		«if (stmt.tagsIgnore.get(1) !== null){'''stmt.branches.get(1)'''}»
		«if (stmt.paths.get(1) !== null){'''branches:'''+ stmt.branches.get(1)}»
		«if (stmt.pathsIgnore.get(1) !== null){'''stmt.branches.get(1)'''}»				
	'''
	
	dispatch def String generateEventType(PullRequestEvent stmt) '''
	
		«if (stmt.branches.get(1) !== null){'''branches:'''+ stmt.branches.get(1)}»
		«if (stmt.tags.get(1) !== null){'''stmt.branches.get(1)'''}»
		«if (stmt.branchesIgnore.get(1) !== null){'''branches:'''+ stmt.branches.get(1)}»
		«if (stmt.tagsIgnore.get(1) !== null){'''stmt.branches.get(1)'''}»
		«if (stmt.paths.get(1) !== null){'''branches:'''+ stmt.branches.get(1)}»
		«if (stmt.pathsIgnore.get(1) !== null){'''stmt.branches.get(1)'''}»			
	
	'''
	dispatch def String generateEventType(ScheduleEvent stmt) ''''''	
	dispatch def String generateEventType(WorkflowDispatchEvent stmt) ''''''
	dispatch def String generateEventType(RepositoryDispatchEvent stmt) ''''''	
	dispatch def String generateEventType(CreateEvent stmt) ''''''
	dispatch def String generateEventType(DeleteEvent stmt) ''''''
	dispatch def String generateEventType(DeploymentEvent stmt) ''''''	
	dispatch def String generateEventType(IssueEvent stmt) ''''''	
	dispatch def String generateEventType(LabelEvent stmt) ''''''	
	

	dispatch def String generateEventType(Job jobs) '''
		test:
		name: «jobs.name.toString»
		runsOn: «jobs.name.toString»	 
		name: «jobs.runsOn.toString»	
	
		«if (!jobs.steps.empty){
			'''steps::'''
				for (Step stps : jobs.steps){
					«generateStepsType(stps).join('\n')»
				}
		}»						

	'''	

	dispatch def String generateStepsType(Step step) '''
		«if (step.name !== null){'''- name'''«step.name»}»
		«if (step.uses !== null){'''- uses'''«step.uses»	}»	
		«if (step.with.get(1) !== null){'''with:'''«step.with.get(1)»}»
		«if (step.run.get(1) !== null){'''run:'''«step.run.get(1) »}»
		«if (step.env.get(1) !== null){'''env:'''«step.env.get(1)»}»

	'''	

	

		
}
