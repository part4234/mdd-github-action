/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.mdd.project.githubaction.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.mdd.project.githubaction.Env;
import uk.ac.kcl.inf.mdd.project.githubaction.GithubactionPackage;
import uk.ac.kcl.inf.mdd.project.githubaction.RunSetting;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Run Setting</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdd.project.githubaction.impl.RunSettingImpl#getWorkingDirectory <em>Working Directory</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdd.project.githubaction.impl.RunSettingImpl#getShell <em>Shell</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdd.project.githubaction.impl.RunSettingImpl#getWith <em>With</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RunSettingImpl extends MinimalEObjectImpl.Container implements RunSetting
{
  /**
   * The default value of the '{@link #getWorkingDirectory() <em>Working Directory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkingDirectory()
   * @generated
   * @ordered
   */
  protected static final String WORKING_DIRECTORY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWorkingDirectory() <em>Working Directory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkingDirectory()
   * @generated
   * @ordered
   */
  protected String workingDirectory = WORKING_DIRECTORY_EDEFAULT;

  /**
   * The default value of the '{@link #getShell() <em>Shell</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShell()
   * @generated
   * @ordered
   */
  protected static final String SHELL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getShell() <em>Shell</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShell()
   * @generated
   * @ordered
   */
  protected String shell = SHELL_EDEFAULT;

  /**
   * The cached value of the '{@link #getWith() <em>With</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWith()
   * @generated
   * @ordered
   */
  protected EList<Env> with;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RunSettingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GithubactionPackage.Literals.RUN_SETTING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWorkingDirectory()
  {
    return workingDirectory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWorkingDirectory(String newWorkingDirectory)
  {
    String oldWorkingDirectory = workingDirectory;
    workingDirectory = newWorkingDirectory;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GithubactionPackage.RUN_SETTING__WORKING_DIRECTORY, oldWorkingDirectory, workingDirectory));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getShell()
  {
    return shell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setShell(String newShell)
  {
    String oldShell = shell;
    shell = newShell;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GithubactionPackage.RUN_SETTING__SHELL, oldShell, shell));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Env> getWith()
  {
    if (with == null)
    {
      with = new EObjectContainmentEList<Env>(Env.class, this, GithubactionPackage.RUN_SETTING__WITH);
    }
    return with;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GithubactionPackage.RUN_SETTING__WITH:
        return ((InternalEList<?>)getWith()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GithubactionPackage.RUN_SETTING__WORKING_DIRECTORY:
        return getWorkingDirectory();
      case GithubactionPackage.RUN_SETTING__SHELL:
        return getShell();
      case GithubactionPackage.RUN_SETTING__WITH:
        return getWith();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GithubactionPackage.RUN_SETTING__WORKING_DIRECTORY:
        setWorkingDirectory((String)newValue);
        return;
      case GithubactionPackage.RUN_SETTING__SHELL:
        setShell((String)newValue);
        return;
      case GithubactionPackage.RUN_SETTING__WITH:
        getWith().clear();
        getWith().addAll((Collection<? extends Env>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GithubactionPackage.RUN_SETTING__WORKING_DIRECTORY:
        setWorkingDirectory(WORKING_DIRECTORY_EDEFAULT);
        return;
      case GithubactionPackage.RUN_SETTING__SHELL:
        setShell(SHELL_EDEFAULT);
        return;
      case GithubactionPackage.RUN_SETTING__WITH:
        getWith().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GithubactionPackage.RUN_SETTING__WORKING_DIRECTORY:
        return WORKING_DIRECTORY_EDEFAULT == null ? workingDirectory != null : !WORKING_DIRECTORY_EDEFAULT.equals(workingDirectory);
      case GithubactionPackage.RUN_SETTING__SHELL:
        return SHELL_EDEFAULT == null ? shell != null : !SHELL_EDEFAULT.equals(shell);
      case GithubactionPackage.RUN_SETTING__WITH:
        return with != null && !with.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (workingDirectory: ");
    result.append(workingDirectory);
    result.append(", shell: ");
    result.append(shell);
    result.append(')');
    return result.toString();
  }

} //RunSettingImpl
