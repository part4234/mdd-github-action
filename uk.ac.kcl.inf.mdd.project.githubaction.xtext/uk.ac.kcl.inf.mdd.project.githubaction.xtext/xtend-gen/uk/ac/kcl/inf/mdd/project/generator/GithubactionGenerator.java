/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.mdd.project.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.inf.mdd.project.githubaction.Env;
import uk.ac.kcl.inf.mdd.project.githubaction.Event;
import uk.ac.kcl.inf.mdd.project.githubaction.IssueActivityType;
import uk.ac.kcl.inf.mdd.project.githubaction.IssueEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Job;
import uk.ac.kcl.inf.mdd.project.githubaction.PushEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Repository;
import uk.ac.kcl.inf.mdd.project.githubaction.RunSetting;
import uk.ac.kcl.inf.mdd.project.githubaction.Step;
import uk.ac.kcl.inf.mdd.project.githubaction.Workflow;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GithubactionGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Repository model = ((Repository) _head);
    fsa.generateFile(this.deriveStatsTargetFileNameFor(resource), this.doGenerateStats(model));
    fsa.generateFile(this.deriveStatsTargetFileNameFor(resource), this.doGenerateClass(model));
  }
  
  public String deriveStatsTargetFileNameFor(final Resource resource) {
    return resource.getURI().appendFileExtension("yaml").lastSegment();
  }
  
  public String doGenerateStats(final Repository program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Program contains:");
    _builder.newLine();
    _builder.newLine();
    _builder.append("- ");
    int _size = IteratorExtensions.size(Iterators.<Repository>filter(program.eAllContents(), Repository.class));
    _builder.append(_size);
    _builder.append(" Repositories");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_1 = IteratorExtensions.size(Iterators.<Workflow>filter(program.eAllContents(), Workflow.class));
    _builder.append(_size_1);
    _builder.append(" Workflows");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_2 = IteratorExtensions.size(Iterators.<Event>filter(program.eAllContents(), Event.class));
    _builder.append(_size_2);
    _builder.append(" Events");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_3 = IteratorExtensions.size(Iterators.<Job>filter(program.eAllContents(), Job.class));
    _builder.append(_size_3);
    _builder.append(" Jobs");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_4 = IteratorExtensions.size(Iterators.<Step>filter(program.eAllContents(), Step.class));
    _builder.append(_size_4);
    _builder.append(" Steps");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder.toString();
  }
  
  public String deriveClassNameFor(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origName.substring(0, origName.indexOf(".")));
      _xblockexpression = (_firstUpper + "Turtle");
    }
    return _xblockexpression;
  }
  
  /**
   * Below are parseable dispatch mathos for all grammar types
   */
  public String doGenerateClass(final Repository program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# This is the generated .yaml file for the input repository.");
    _builder.newLine();
    _builder.append("# Files are individually generated Individually for each workflow and differ by main/feature");
    _builder.newLine();
    _builder.newLine();
    final Function1<Workflow, String> _function = (Workflow it) -> {
      return this.generateWorkFlowStmt(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<Workflow, String>map(program.getWorkflows(), _function), "\n");
    _builder.append(_join);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateWorkFlowStmt(final Workflow stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("name: ");
    String _name = stmt.getName();
    _builder.append(_name, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _xifexpression = null;
    EList<Event> _on = stmt.getOn();
    boolean _tripleNotEquals = (_on != "");
    if (_tripleNotEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("on:");
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression, "\t");
    String _generateEventStmt = this.generateEventStmt(stmt.getOn().get(0));
    _builder.append(_generateEventStmt, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _xifexpression_1 = null;
    EList<Env> _env = stmt.getEnv();
    boolean _tripleNotEquals_1 = (_env != "");
    if (_tripleNotEquals_1) {
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("env:");
      _xifexpression_1 = _builder_2;
    }
    _builder.append(_xifexpression_1, "\t");
    String _generateEventStmt_1 = this.generateEventStmt(stmt.getOn().get(0));
    _builder.append(_generateEventStmt_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _xifexpression_2 = null;
    RunSetting _defaults = stmt.getDefaults();
    boolean _tripleNotEquals_2 = (_defaults != "");
    if (_tripleNotEquals_2) {
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("defaults:");
      _xifexpression_2 = _builder_3;
    }
    _builder.append(_xifexpression_2, "\t");
    String _generateEventStmt_2 = this.generateEventStmt(stmt.getOn().get(0));
    _builder.append(_generateEventStmt_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _xifexpression_3 = null;
    EList<Job> _jobs = stmt.getJobs();
    boolean _tripleNotEquals_3 = (_jobs != "");
    if (_tripleNotEquals_3) {
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("jobs:");
      _xifexpression_3 = _builder_4;
    }
    _builder.append(_xifexpression_3, "\t");
    String _generateEventStmt_3 = this.generateEventStmt(stmt.getOn().get(0));
    _builder.append(_generateEventStmt_3, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateEventStmt(final Event stmt) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from Class<PushEvent> to PushEvent");
  }
  
  protected String _generatePushEventStmt(final PushEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateActiontStmt(final Job stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("on:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(");
    CharSequence _xifexpression = null;
    String _jobName = stmt.getJobName();
    boolean _tripleEquals = (_jobName == "");
    if (_tripleEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("-");
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateActiontStmt(final RunSetting stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateActiontsStmt(final Job stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateActiontStmt(final Step stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateActiontStmt(final IssueEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    CharSequence _xifexpression = null;
    EList<IssueActivityType> _activityTypes = stmt.getActivityTypes();
    boolean _tripleEquals = (_activityTypes == "opened");
    if (_tripleEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("name:");
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateActiontStmt(final /* Name */Object stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateWorkFlowStmt(final Workflow stmt) {
    return _generateWorkFlowStmt(stmt);
  }
  
  public String generateEventStmt(final Event stmt) {
    return _generateEventStmt(stmt);
  }
  
  public String generatePushEventStmt(final PushEvent stmt) {
    return _generatePushEventStmt(stmt);
  }
  
  public String generateActiontStmt(final Name stmt) {
    if (stmt != null) {
      return _generateActiontStmt(stmt);
    } else if (stmt != null) {
      return _generateActiontStmt(stmt);
    } else if (stmt != null) {
      return _generateActiontStmt(stmt);
    } else if (stmt != null) {
      return _generateActiontStmt(stmt);
    } else if (stmt != null) {
      return _generateActiontStmt(stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
  
  public String generateActiontsStmt(final Job stmt) {
    return _generateActiontsStmt(stmt);
  }
}
