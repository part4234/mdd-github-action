/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.mdd.project.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.inf.mdd.project.githubaction.CreateEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.DeleteEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.DeploymentEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Env;
import uk.ac.kcl.inf.mdd.project.githubaction.Event;
import uk.ac.kcl.inf.mdd.project.githubaction.IssueEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Job;
import uk.ac.kcl.inf.mdd.project.githubaction.LabelEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.PullRequestEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.PushEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Repository;
import uk.ac.kcl.inf.mdd.project.githubaction.RepositoryDispatchEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.RunSetting;
import uk.ac.kcl.inf.mdd.project.githubaction.ScheduleEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Step;
import uk.ac.kcl.inf.mdd.project.githubaction.Workflow;
import uk.ac.kcl.inf.mdd.project.githubaction.WorkflowDispatchEvent;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GithubactionGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Repository model = ((Repository) _head);
    fsa.generateFile(this.deriveStatsTargetFileNameFor(resource), this.doGenerateStats(model));
    fsa.generateFile(this.deriveStatsTargetFileNameFor(resource), this.doGenerateClass(model));
  }
  
  public String deriveStatsTargetFileNameFor(final Resource resource) {
    return resource.getURI().appendFileExtension("yaml").lastSegment();
  }
  
  public String doGenerateStats(final Repository program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Program contains:");
    _builder.newLine();
    _builder.newLine();
    _builder.append("- ");
    int _size = IteratorExtensions.size(Iterators.<Repository>filter(program.eAllContents(), Repository.class));
    _builder.append(_size);
    _builder.append(" Repositories");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_1 = IteratorExtensions.size(Iterators.<Workflow>filter(program.eAllContents(), Workflow.class));
    _builder.append(_size_1);
    _builder.append(" Workflows");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_2 = IteratorExtensions.size(Iterators.<Event>filter(program.eAllContents(), Event.class));
    _builder.append(_size_2);
    _builder.append(" Events");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_3 = IteratorExtensions.size(Iterators.<Job>filter(program.eAllContents(), Job.class));
    _builder.append(_size_3);
    _builder.append(" Jobs");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_4 = IteratorExtensions.size(Iterators.<Step>filter(program.eAllContents(), Step.class));
    _builder.append(_size_4);
    _builder.append(" Steps");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder.toString();
  }
  
  public String deriveClassNameFor(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origName.substring(0, origName.indexOf(".")));
      _xblockexpression = (_firstUpper + "Turtle");
    }
    return _xblockexpression;
  }
  
  /**
   * Below are parseable dispatch mathos for all grammar types
   */
  public String doGenerateClass(final Repository program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# This is the generated .yaml file for the input repository.");
    _builder.newLine();
    _builder.append("# Files are individually generated Individually for each workflow and differ by main/feature");
    _builder.newLine();
    _builder.newLine();
    final Function1<Workflow, String> _function = (Workflow it) -> {
      return this.generateWorkFlowStmt(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<Workflow, String>map(program.getWorkflows(), _function), "\n");
    _builder.append(_join);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * «» Ignore the name and just append to it. Get it from the top attribute values.
   * Files need to be split here for master and featre- TBD
   */
  protected String _generateWorkFlowStmt(final Workflow stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("name: ");
    EList<Event> _on = stmt.getOn();
    _builder.append(_on, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getOn().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("on:");
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression, "\t");
    String _generateEventStmt = this.generateEventStmt(stmt.getOn().get(0));
    _builder.append(_generateEventStmt, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append(" \t\t");
    CharSequence _xifexpression_1 = null;
    boolean _isEmpty_1 = stmt.getEnv().isEmpty();
    boolean _not_1 = (!_isEmpty_1);
    if (_not_1) {
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("env:");
      _xifexpression_1 = _builder_2;
    }
    _builder.append(_xifexpression_1, " \t\t");
    String _generateEventStmt2 = this.generateEventStmt2(stmt.getEnv().get(0));
    _builder.append(_generateEventStmt2, " \t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _xifexpression_2 = null;
    RunSetting _defaults = stmt.getDefaults();
    boolean _notEquals = (!Objects.equal(_defaults, ""));
    if (_notEquals) {
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("defaults:");
      _xifexpression_2 = _builder_3;
    }
    _builder.append(_xifexpression_2, "\t");
    String _generateEventStmt3 = this.generateEventStmt3(stmt.getDefaults());
    _builder.append(_generateEventStmt3, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _xifexpression_3 = null;
    boolean _isEmpty_2 = stmt.getJobs().isEmpty();
    boolean _not_2 = (!_isEmpty_2);
    if (_not_2) {
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("jobs:");
      _xifexpression_3 = _builder_4;
    }
    _builder.append(_xifexpression_3, "\t");
    String _generateEventStmt4 = this.generateEventStmt4(stmt.getJobs().get(0));
    _builder.append(_generateEventStmt4, "\t");
    _builder.append("\t\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateEventStmt(final Event stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    CharSequence _xifexpression = null;
    boolean _notEquals = (!Objects.equal(PushEvent.class, null));
    if (_notEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("    ");
      _builder_1.append("push:");
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    String _generatePushEventStmt = this.generatePushEventStmt(PushEvent.class.cast(PushEvent.class));
    _builder.append(_generatePushEventStmt);
    _builder.newLineIfNotEmpty();
    CharSequence _xifexpression_1 = null;
    boolean _notEquals_1 = (!Objects.equal(PullRequestEvent.class, null));
    if (_notEquals_1) {
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("    ");
      _builder_2.append("push:");
      _xifexpression_1 = _builder_2;
    }
    _builder.append(_xifexpression_1);
    this.generatePullRequestEventt(this);
    _builder.newLineIfNotEmpty();
    CharSequence _xifexpression_2 = null;
    boolean _notEquals_2 = (!Objects.equal(ScheduleEvent.class, null));
    if (_notEquals_2) {
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("    ");
      _builder_3.append("push:");
      _xifexpression_2 = _builder_3;
    }
    _builder.append(_xifexpression_2);
    this.generateScheduleEvent(this);
    _builder.newLineIfNotEmpty();
    CharSequence _xifexpression_3 = null;
    boolean _notEquals_3 = (!Objects.equal(WorkflowDispatchEvent.class, null));
    if (_notEquals_3) {
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("    ");
      _builder_4.append("push:");
      _xifexpression_3 = _builder_4;
    }
    _builder.append(_xifexpression_3);
    this.generateWorkflowDispatchEvent(this);
    _builder.newLineIfNotEmpty();
    CharSequence _xifexpression_4 = null;
    boolean _notEquals_4 = (!Objects.equal(RepositoryDispatchEvent.class, null));
    if (_notEquals_4) {
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("    ");
      _builder_5.append("push:");
      _xifexpression_4 = _builder_5;
    }
    _builder.append(_xifexpression_4);
    this.generateRepositoryDispatchEvent(this);
    _builder.newLineIfNotEmpty();
    CharSequence _xifexpression_5 = null;
    boolean _notEquals_5 = (!Objects.equal(CreateEvent.class, null));
    if (_notEquals_5) {
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("    ");
      _builder_6.append("push:");
      _xifexpression_5 = _builder_6;
    }
    _builder.append(_xifexpression_5);
    this.generateCreateEvent(this);
    _builder.newLineIfNotEmpty();
    CharSequence _xifexpression_6 = null;
    boolean _notEquals_6 = (!Objects.equal(DeleteEvent.class, null));
    if (_notEquals_6) {
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("    ");
      _builder_7.append("push:");
      _xifexpression_6 = _builder_7;
    }
    _builder.append(_xifexpression_6);
    this.generateDeleteEvent(this);
    _builder.newLineIfNotEmpty();
    CharSequence _xifexpression_7 = null;
    boolean _notEquals_7 = (!Objects.equal(DeploymentEvent.class, null));
    if (_notEquals_7) {
      StringConcatenation _builder_8 = new StringConcatenation();
      _builder_8.append("    ");
      _builder_8.append("push:");
      _xifexpression_7 = _builder_8;
    }
    _builder.append(_xifexpression_7);
    this.generateDeploymentEvent(this);
    _builder.newLineIfNotEmpty();
    CharSequence _xifexpression_8 = null;
    boolean _notEquals_8 = (!Objects.equal(IssueEvent.class, null));
    if (_notEquals_8) {
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("    ");
      _builder_9.append("push:");
      _xifexpression_8 = _builder_9;
    }
    _builder.append(_xifexpression_8);
    this.generateIssueEvent(this);
    _builder.newLineIfNotEmpty();
    CharSequence _xifexpression_9 = null;
    boolean _notEquals_9 = (!Objects.equal(LabelEvent.class, null));
    if (_notEquals_9) {
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append("    ");
      _builder_10.append("push:");
      _xifexpression_9 = _builder_10;
    }
    _builder.append(_xifexpression_9);
    this.generateLabelEvent(this);
    _builder.append("\t\t\t\t\t\t");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generatePushEventStmt(final PushEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getBranchesIgnore().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("    ");
      _builder_1.append("branches: [master]");
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateEventStmt2(final Env stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateEventStmt3(final RunSetting stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateEventStmt4(final Job stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  public void generateLabelEvent(final Object null1) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public void generateIssueEvent(final Object null1) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public void generateDeploymentEvent(final Object null1) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public void generateDeleteEvent(final Object null1) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public void generateCreateEvent(final Object null1) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public void generateRepositoryDispatchEvent(final Object null1) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public void generateWorkflowDispatchEvent(final Object null1) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public void generateScheduleEvent(final Object null1) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public void generatePullRequestEventt(final Object null1) {
    throw new UnsupportedOperationException("TODO: auto-generated method stub");
  }
  
  public String generateWorkFlowStmt(final Workflow stmt) {
    return _generateWorkFlowStmt(stmt);
  }
  
  public String generateEventStmt(final Event stmt) {
    return _generateEventStmt(stmt);
  }
  
  public String generatePushEventStmt(final PushEvent stmt) {
    return _generatePushEventStmt(stmt);
  }
  
  public String generateEventStmt2(final Env stmt) {
    return _generateEventStmt2(stmt);
  }
  
  public String generateEventStmt3(final RunSetting stmt) {
    return _generateEventStmt3(stmt);
  }
  
  public String generateEventStmt4(final Job stmt) {
    return _generateEventStmt4(stmt);
  }
}
