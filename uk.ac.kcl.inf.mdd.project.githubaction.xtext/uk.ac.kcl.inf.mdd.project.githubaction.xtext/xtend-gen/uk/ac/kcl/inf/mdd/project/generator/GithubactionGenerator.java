/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.mdd.project.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.inf.mdd.project.githubaction.BranchEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.CreateEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.DeleteEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.DeploymentEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Env;
import uk.ac.kcl.inf.mdd.project.githubaction.Event;
import uk.ac.kcl.inf.mdd.project.githubaction.Input;
import uk.ac.kcl.inf.mdd.project.githubaction.InputParameter;
import uk.ac.kcl.inf.mdd.project.githubaction.IssueActivityType;
import uk.ac.kcl.inf.mdd.project.githubaction.IssueEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Job;
import uk.ac.kcl.inf.mdd.project.githubaction.LabelActivityType;
import uk.ac.kcl.inf.mdd.project.githubaction.LabelEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.PullRequestEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.PushEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Repository;
import uk.ac.kcl.inf.mdd.project.githubaction.RepositoryDispatchEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.ScheduleEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Step;
import uk.ac.kcl.inf.mdd.project.githubaction.Workflow;
import uk.ac.kcl.inf.mdd.project.githubaction.WorkflowDispatchEvent;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GithubactionGenerator extends AbstractGenerator {
  private static class Environment {
    private int counter = 0;
    
    public CharSequence getFreshVarName() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("i_");
      int _plusPlus = this.counter++;
      _builder.append(_plusPlus);
      return _builder;
    }
    
    public int exit() {
      return this.counter--;
    }
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Repository model = ((Repository) _head);
    fsa.generateFile(this.deriveStatsTargetFileNameFor(resource), this.doGenerateStats(model));
    final Consumer<Workflow> _function = (Workflow wf) -> {
      fsa.generateFile(this.deriveYamlFileNameFor(wf), this.doGenerateWorkflow(wf));
    };
    model.getWorkflows().forEach(_function);
  }
  
  public String deriveStatsTargetFileNameFor(final Resource resource) {
    return resource.getURI().appendFileExtension("stat.txt").lastSegment();
  }
  
  public String deriveClassNameFor(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origName.substring(0, origName.indexOf(".")));
      _xblockexpression = (_firstUpper + "GithubAction");
    }
    return _xblockexpression;
  }
  
  public String deriveYamlFileNameFor(final Workflow wf) {
    String _replace = wf.getName().toLowerCase().replace(" ", "-");
    return (_replace + ".yaml");
  }
  
  public String doGenerateStats(final Repository repo) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Program contains:");
    _builder.newLine();
    _builder.newLine();
    _builder.append("- ");
    int _size = IteratorExtensions.size(Iterators.<Repository>filter(repo.eAllContents(), Repository.class));
    _builder.append(_size);
    _builder.append(" Repositories");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_1 = IteratorExtensions.size(Iterators.<Workflow>filter(repo.eAllContents(), Workflow.class));
    _builder.append(_size_1);
    _builder.append(" Workflows");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_2 = IteratorExtensions.size(Iterators.<Event>filter(repo.eAllContents(), Event.class));
    _builder.append(_size_2);
    _builder.append(" Events");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_3 = IteratorExtensions.size(Iterators.<Job>filter(repo.eAllContents(), Job.class));
    _builder.append(_size_3);
    _builder.append(" Jobs");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_4 = IteratorExtensions.size(Iterators.<Step>filter(repo.eAllContents(), Step.class));
    _builder.append(_size_4);
    _builder.append(" Steps");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String doGenerateClass(final Repository repo, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.io.FileWriter;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.io.File; ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("     ");
    _builder.append("public static void main(String []args){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String parsedData  = \"\"\"");
    _builder.newLine();
    _builder.append("        ");
    final Function1<Workflow, String> _function = (Workflow it) -> {
      GithubactionGenerator.Environment _environment = new GithubactionGenerator.Environment();
      return this.generateWorkflow(it, _environment);
    };
    String _join = IterableExtensions.join(ListExtensions.<Workflow, String>map(repo.getWorkflows(), _function), "\n");
    _builder.append(_join, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("\"\"\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("generateYamlFiles(parsedData);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("public static void generateYamlFiles(String parsedData){");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("if (parsedData.contains(\"branchesIgnore: master\")){");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("// generate feature and master file");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("createAndWriteFile(parsedData.substring(0,parsedData.indexOf(\"name: Master Branch\")-1),\"featureBranch.yaml\");");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("createAndWriteFile(parsedData.substring(parsedData.indexOf(\"name: Master Branch\")),\"MasterBranch.yaml\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void createAndWriteFile(String confData, String filename){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("File fileObj = new File(\"./../\"+filename); // use \'backslash\' for win and \'/\' unix-like os");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("FileWriter myWriter = new FileWriter(fileObj);");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("myWriter.write(confData);");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("myWriter.close();");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("System.out.println(\"Successfully created yaml file: \"+filename);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("System.out.println(\"An error occurred.\");");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("}\t\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String doGenerateWorkflow(final Workflow wf) {
    GithubactionGenerator.Environment _environment = new GithubactionGenerator.Environment();
    return this.generateWorkflow(wf, _environment);
  }
  
  /**
   * Generator functions
   */
  public String generateWorkflow(final Workflow workflow, final GithubactionGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("name: ");
    String _string = workflow.getName().toString();
    _builder.append(_string);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _isEmpty = workflow.getOn().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("on:");
        _builder.newLine();
        _builder.append("  ");
        final Function1<Event, String> _function = (Event it) -> {
          return this.generateEvent(it);
        };
        String _join = IterableExtensions.join(ListExtensions.<Event, String>map(workflow.getOn(), _function), "");
        _builder.append(_join, "  ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      boolean _isEmpty_1 = workflow.getJobs().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("jobs:");
        _builder.newLine();
        _builder.append("  ");
        final Function1<Job, String> _function_1 = (Job it) -> {
          return this.generateJob(it);
        };
        String _join_1 = IterableExtensions.join(ListExtensions.<Job, String>map(workflow.getJobs(), _function_1), "\n");
        _builder.append(_join_1, "  ");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  protected String _generateEvent(final ScheduleEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("schedule:");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("-cron: \"");
    String _xifexpression = null;
    String _minute = event.getMinute();
    boolean _tripleNotEquals = (_minute != null);
    if (_tripleNotEquals) {
      _xifexpression = event.getMinute();
    } else {
      _xifexpression = "*";
    }
    String _plus = (_xifexpression + " ");
    String _xifexpression_1 = null;
    String _hour = event.getHour();
    boolean _tripleNotEquals_1 = (_hour != null);
    if (_tripleNotEquals_1) {
      _xifexpression_1 = event.getHour();
    } else {
      _xifexpression_1 = "*";
    }
    String _plus_1 = (_plus + _xifexpression_1);
    String _plus_2 = (_plus_1 + " ");
    String _xifexpression_2 = null;
    String _day = event.getDay();
    boolean _tripleNotEquals_2 = (_day != null);
    if (_tripleNotEquals_2) {
      _xifexpression_2 = event.getDay();
    } else {
      _xifexpression_2 = "*";
    }
    String _plus_3 = (_plus_2 + _xifexpression_2);
    String _plus_4 = (_plus_3 + " ");
    String _xifexpression_3 = null;
    String _month = event.getMonth();
    boolean _tripleNotEquals_3 = (_month != null);
    if (_tripleNotEquals_3) {
      _xifexpression_3 = event.getMonth();
    } else {
      _xifexpression_3 = "*";
    }
    String _plus_5 = (_plus_4 + _xifexpression_3);
    String _plus_6 = (_plus_5 + " ");
    String _xifexpression_4 = null;
    String _dayOfWeek = event.getDayOfWeek();
    boolean _tripleNotEquals_4 = (_dayOfWeek != null);
    if (_tripleNotEquals_4) {
      _xifexpression_4 = event.getDayOfWeek();
    } else {
      _xifexpression_4 = "*";
    }
    String _plus_7 = (_plus_6 + _xifexpression_4);
    _builder.append(_plus_7, "  ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateEvent(final RepositoryDispatchEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("repository_dispatch:");
    _builder.newLine();
    {
      boolean _isEmpty = event.getEventTypes().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("  types: [");
        String _join = IterableExtensions.join(event.getEventTypes(), ", ");
        _builder.append(_join);
        _builder.append("]");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateEvent(final WorkflowDispatchEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("workflow_dispatch:");
    _builder.newLine();
    {
      boolean _isEmpty = event.getInputs().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("  ");
        final Function1<Input, String> _function = (Input it) -> {
          return this.generateInput(it);
        };
        String _join = IterableExtensions.join(ListExtensions.<Input, String>map(event.getInputs(), _function), "\n");
        _builder.append(_join);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateEvent(final PushEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("push:");
    _builder.newLine();
    _builder.append("  ");
    String _generateEventTriggers = this.generateEventTriggers(((BranchEvent) event));
    _builder.append(_generateEventTriggers, "  ");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateEvent(final PullRequestEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("pull_request:");
    _builder.newLine();
    _builder.append("  ");
    String _generateEventTriggers = this.generateEventTriggers(((BranchEvent) event));
    _builder.append(_generateEventTriggers, "  ");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateEvent(final CreateEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("create:");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateEvent(final DeleteEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("delete:");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateEvent(final DeploymentEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("deployment:");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateEvent(final IssueEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("issues:");
    _builder.newLine();
    {
      boolean _isEmpty = event.getActivityTypes().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("  types: [");
        final Function1<IssueActivityType, String> _function = (IssueActivityType it) -> {
          return it.toString();
        };
        String _join = IterableExtensions.join(ListExtensions.<IssueActivityType, String>map(event.getActivityTypes(), _function), ", ");
        _builder.append(_join);
        _builder.append("]");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateEvent(final LabelEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("label:");
    _builder.newLine();
    {
      boolean _isEmpty = event.getActivityTypes().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("  types: [");
        final Function1<LabelActivityType, String> _function = (LabelActivityType it) -> {
          return it.toString();
        };
        String _join = IterableExtensions.join(ListExtensions.<LabelActivityType, String>map(event.getActivityTypes(), _function), ", ");
        _builder.append(_join);
        _builder.append("]");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generateJob(final Job job) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = job.getName();
    _builder.append(_name);
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    {
      String _jobName = job.getJobName();
      boolean _tripleNotEquals = (_jobName != null);
      if (_tripleNotEquals) {
        _builder.append("  name: ");
        String _jobName_1 = job.getJobName();
        _builder.append(_jobName_1);
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _runsOn = job.getRunsOn();
      boolean _tripleNotEquals_1 = (_runsOn != null);
      if (_tripleNotEquals_1) {
        _builder.append("  runsOn: ");
        String _runsOn_1 = job.getRunsOn();
        _builder.append(_runsOn_1);
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty = job.getNeeds().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("  needs: [");
        final Function1<Job, String> _function = (Job j) -> {
          return j.getName();
        };
        String _join = IterableExtensions.join(ListExtensions.<Job, String>map(job.getNeeds(), _function), ", ");
        _builder.append(_join);
        _builder.append("]");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty_1 = job.getEnv().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("  env:");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        final Function1<Env, String> _function_1 = (Env it) -> {
          return this.generateEnv(it);
        };
        String _join_1 = IterableExtensions.join(ListExtensions.<Env, String>map(job.getEnv(), _function_1), "\n");
        _builder.append(_join_1, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isEmpty_2 = job.getSteps().isEmpty();
      boolean _not_2 = (!_isEmpty_2);
      if (_not_2) {
        _builder.append("  steps:");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        String _generateStepList = this.generateStepList(job.getSteps());
        _builder.append(_generateStepList, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String generateStepList(final EList<Step> steps) {
    final Function1<Step, String> _function = (Step it) -> {
      return this.generateStep(it);
    };
    final Function1<String, Boolean> _function_1 = (String s) -> {
      int _length = s.length();
      return Boolean.valueOf((_length > 2));
    };
    final Function1<String, String> _function_2 = (String s) -> {
      String _substring = s.substring(2);
      return ("- " + _substring);
    };
    return IterableExtensions.join(IterableExtensions.<String, String>map(IterableExtensions.<String>filter(ListExtensions.<Step, String>map(steps, _function), _function_1), _function_2), "");
  }
  
  public String generateStep(final Step step) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _stepName = step.getStepName();
      boolean _tripleNotEquals = (_stepName != null);
      if (_tripleNotEquals) {
        _builder.append("  name: ");
        String _stepName_1 = step.getStepName();
        _builder.append(_stepName_1);
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _uses = step.getUses();
      boolean _tripleNotEquals_1 = (_uses != null);
      if (_tripleNotEquals_1) {
        _builder.append("  uses: ");
        String _uses_1 = step.getUses();
        _builder.append(_uses_1);
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty = step.getWith().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("  with:");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        final Function1<InputParameter, String> _function = (InputParameter it) -> {
          return this.generateInputParameter(it);
        };
        String _join = IterableExtensions.join(ListExtensions.<InputParameter, String>map(step.getWith(), _function), "\n");
        _builder.append(_join, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      int _size = step.getRun().size();
      boolean _equals = (_size == 1);
      if (_equals) {
        _builder.append("  run: ");
        String _join_1 = IterableExtensions.join(step.getRun(), "\n");
        _builder.append(_join_1);
        _builder.newLineIfNotEmpty();
      } else {
        int _size_1 = step.getRun().size();
        boolean _greaterThan = (_size_1 > 1);
        if (_greaterThan) {
          _builder.append("  run: |");
          _builder.newLineIfNotEmpty();
          _builder.append("    ");
          String _join_2 = IterableExtensions.join(step.getRun(), "\n");
          _builder.append(_join_2, "    ");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    {
      boolean _isEmpty_1 = step.getEnv().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("  env:");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        final Function1<Env, String> _function_1 = (Env it) -> {
          return this.generateEnv(it);
        };
        String _join_3 = IterableExtensions.join(ListExtensions.<Env, String>map(step.getEnv(), _function_1), "\n");
        _builder.append(_join_3, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String generateEnv(final Env env) {
    String _name = env.getName();
    String _plus = (_name + ": ");
    String _value = env.getValue();
    return (_plus + _value);
  }
  
  public String generateInputParameter(final InputParameter p) {
    String _name = p.getName();
    String _plus = (_name + ": ");
    String _value = p.getValue();
    return (_plus + _value);
  }
  
  public String generateInput(final Input input) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = input.getName();
    _builder.append(_name);
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    {
      String _description = input.getDescription();
      boolean _tripleNotEquals = (_description != null);
      if (_tripleNotEquals) {
        _builder.append("  description: ");
        String _description_1 = input.getDescription();
        _builder.append(_description_1);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("required: ");
    boolean _isRequired = input.isRequired();
    _builder.append(_isRequired);
    _builder.newLineIfNotEmpty();
    {
      String _default = input.getDefault();
      boolean _tripleNotEquals_1 = (_default != null);
      if (_tripleNotEquals_1) {
        _builder.append("  default: ");
        String _default_1 = input.getDefault();
        _builder.append(_default_1);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generateEventTriggers(final BranchEvent event) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isEmpty = event.getBranches().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("branches:");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        String _generateStringArray = this.generateStringArray(event.getBranches());
        _builder.append(_generateStringArray, "  ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isEmpty_1 = event.getTags().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("tags:");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        String _generateStringArray_1 = this.generateStringArray(event.getTags());
        _builder.append(_generateStringArray_1, "  ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isEmpty_2 = event.getBranchesIgnore().isEmpty();
      boolean _not_2 = (!_isEmpty_2);
      if (_not_2) {
        _builder.append("branchesIgnore:");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        String _generateStringArray_2 = this.generateStringArray(event.getBranchesIgnore());
        _builder.append(_generateStringArray_2, "  ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isEmpty_3 = event.getTagsIgnore().isEmpty();
      boolean _not_3 = (!_isEmpty_3);
      if (_not_3) {
        _builder.append("tagsIgnore:");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        String _generateStringArray_3 = this.generateStringArray(event.getTagsIgnore());
        _builder.append(_generateStringArray_3, "  ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isEmpty_4 = event.getPaths().isEmpty();
      boolean _not_4 = (!_isEmpty_4);
      if (_not_4) {
        _builder.append("paths:");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        String _generateStringArray_4 = this.generateStringArray(event.getPaths());
        _builder.append(_generateStringArray_4, "  ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isEmpty_5 = event.getPathsIgnore().isEmpty();
      boolean _not_5 = (!_isEmpty_5);
      if (_not_5) {
        _builder.append("pathsIgnore:");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        String _generateStringArray_5 = this.generateStringArray(event.getPathsIgnore());
        _builder.append(_generateStringArray_5, "  ");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String generateStringArray(final EList<String> list) {
    final Function1<String, String> _function = (String s) -> {
      return ("- " + s);
    };
    return IterableExtensions.join(ListExtensions.<String, String>map(list, _function), "\n");
  }
  
  public String generateEvent(final Event event) {
    if (event instanceof CreateEvent) {
      return _generateEvent((CreateEvent)event);
    } else if (event instanceof DeleteEvent) {
      return _generateEvent((DeleteEvent)event);
    } else if (event instanceof DeploymentEvent) {
      return _generateEvent((DeploymentEvent)event);
    } else if (event instanceof IssueEvent) {
      return _generateEvent((IssueEvent)event);
    } else if (event instanceof LabelEvent) {
      return _generateEvent((LabelEvent)event);
    } else if (event instanceof PullRequestEvent) {
      return _generateEvent((PullRequestEvent)event);
    } else if (event instanceof PushEvent) {
      return _generateEvent((PushEvent)event);
    } else if (event instanceof RepositoryDispatchEvent) {
      return _generateEvent((RepositoryDispatchEvent)event);
    } else if (event instanceof ScheduleEvent) {
      return _generateEvent((ScheduleEvent)event);
    } else if (event instanceof WorkflowDispatchEvent) {
      return _generateEvent((WorkflowDispatchEvent)event);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(event).toString());
    }
  }
}
