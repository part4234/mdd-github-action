/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.mdd.project.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.inf.mdd.project.githubaction.CreateEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.DeleteEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.DeploymentEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Event;
import uk.ac.kcl.inf.mdd.project.githubaction.IssueEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Job;
import uk.ac.kcl.inf.mdd.project.githubaction.LabelEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.PullRequestEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.PushEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Repository;
import uk.ac.kcl.inf.mdd.project.githubaction.RepositoryDispatchEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.ScheduleEvent;
import uk.ac.kcl.inf.mdd.project.githubaction.Step;
import uk.ac.kcl.inf.mdd.project.githubaction.Workflow;
import uk.ac.kcl.inf.mdd.project.githubaction.WorkflowDispatchEvent;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GithubactionGenerator extends AbstractGenerator {
  private static class Environment {
    private int counter = 0;
    
    public CharSequence getFreshVarName() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("i_");
      int _plusPlus = this.counter++;
      _builder.append(_plusPlus);
      return _builder;
    }
    
    public int exit() {
      return this.counter--;
    }
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Repository model = ((Repository) _head);
    fsa.generateFile("test.txt", this.doGenerateClass(model));
  }
  
  public String deriveStatsTargetFileNameFor(final Resource resource) {
    return resource.getURI().appendFileExtension("yaml").lastSegment();
  }
  
  public String doGenerateStats(final Repository program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Program contains:");
    _builder.newLine();
    _builder.newLine();
    _builder.append("- ");
    int _size = IteratorExtensions.size(Iterators.<Repository>filter(program.eAllContents(), Repository.class));
    _builder.append(_size);
    _builder.append(" Repositories");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_1 = IteratorExtensions.size(Iterators.<Workflow>filter(program.eAllContents(), Workflow.class));
    _builder.append(_size_1);
    _builder.append(" Workflows");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_2 = IteratorExtensions.size(Iterators.<Event>filter(program.eAllContents(), Event.class));
    _builder.append(_size_2);
    _builder.append(" Events");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_3 = IteratorExtensions.size(Iterators.<Job>filter(program.eAllContents(), Job.class));
    _builder.append(_size_3);
    _builder.append(" Jobs");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_4 = IteratorExtensions.size(Iterators.<Step>filter(program.eAllContents(), Step.class));
    _builder.append(_size_4);
    _builder.append(" Steps");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder.toString();
  }
  
  public String deriveClassNameFor(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origName.substring(0, origName.indexOf(".")));
      _xblockexpression = (_firstUpper + "Turtle");
    }
    return _xblockexpression;
  }
  
  /**
   * Below are parseable dispatch mathos for all grammar types
   */
  public String doGenerateClass(final Repository program) {
    StringConcatenation _builder = new StringConcatenation();
    final Function1<Workflow, String> _function = (Workflow it) -> {
      GithubactionGenerator.Environment _environment = new GithubactionGenerator.Environment();
      return this.generateWorkFlowStmt(it, _environment);
    };
    String _join = IterableExtensions.join(ListExtensions.<Workflow, String>map(program.getWorkflows(), _function), "\n");
    _builder.append(_join);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateWorkFlowStmt(final Workflow stmt, final GithubactionGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("name: ");
    String _join = String.join(stmt.getName().toString(), "\n");
    _builder.append(_join);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("on: ");
    String _join_1 = String.join("", "\n");
    _builder.append(_join_1);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String _xifexpression = null;
    boolean _isEmpty = stmt.getOn().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      String _xblockexpression = null;
      {
        final CharSequence freshVarName = env.getFreshVarName();
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("for (int ");
        _builder_1.append(freshVarName);
        _builder_1.append(" = 0; ");
        _builder_1.append(freshVarName);
        _builder_1.append(" < ");
        int _size = stmt.getOn().size();
        _builder_1.append(_size);
        _builder_1.append("; ");
        _builder_1.append(freshVarName);
        _builder_1.append("++) {");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        final Function1<Event, String> _function = (Event it) -> {
          return this.generateEventType(it);
        };
        String _join_2 = IterableExtensions.join(ListExtensions.<Event, String>map(stmt.getOn(), _function), "\n");
        _builder_1.append(_join_2, "\t");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append("\"\".join(\'\\n\')»");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        final String result = _builder_1.toString();
        env.exit();
        _xblockexpression = result;
      }
      _xifexpression = _xblockexpression;
    }
    _builder.append(_xifexpression);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateEventType(final PushEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    CharSequence _xifexpression = null;
    if ((stmt != null)) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append(stmt);
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateEventType(final PullRequestEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateEventType(final ScheduleEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateEventType(final WorkflowDispatchEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateEventType(final RepositoryDispatchEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateEventType(final CreateEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateEventType(final DeleteEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateEventType(final DeploymentEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateEventType(final IssueEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateEventType(final LabelEvent stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  public String generateWorkFlowStmt(final Workflow stmt, final GithubactionGenerator.Environment env) {
    return _generateWorkFlowStmt(stmt, env);
  }
  
  public String generateEventType(final Event stmt) {
    if (stmt instanceof CreateEvent) {
      return _generateEventType((CreateEvent)stmt);
    } else if (stmt instanceof DeleteEvent) {
      return _generateEventType((DeleteEvent)stmt);
    } else if (stmt instanceof DeploymentEvent) {
      return _generateEventType((DeploymentEvent)stmt);
    } else if (stmt instanceof IssueEvent) {
      return _generateEventType((IssueEvent)stmt);
    } else if (stmt instanceof LabelEvent) {
      return _generateEventType((LabelEvent)stmt);
    } else if (stmt instanceof PullRequestEvent) {
      return _generateEventType((PullRequestEvent)stmt);
    } else if (stmt instanceof PushEvent) {
      return _generateEventType((PushEvent)stmt);
    } else if (stmt instanceof RepositoryDispatchEvent) {
      return _generateEventType((RepositoryDispatchEvent)stmt);
    } else if (stmt instanceof ScheduleEvent) {
      return _generateEventType((ScheduleEvent)stmt);
    } else if (stmt instanceof WorkflowDispatchEvent) {
      return _generateEventType((WorkflowDispatchEvent)stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
}
